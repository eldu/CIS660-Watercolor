//**************************************************************************/
// Copyright 2014 Autodesk, Inc.
// All rights reserved.
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
//**************************************************************************/

// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

// Target size.
uniform vec2 gTargetSize : ViewportPixelSize;

// The single filter input, i.e. the image to be filtered.
uniform texture2D gInputTex : InputTexture;

// Filter input sampler.
uniform sampler2D gInputSamp = sampler_state
{
    Texture = <gInputTex>;
    //MinFilter = Point;
    //MagFilter = Point;
    //MipFilter = Point;
};

// Image with painted edge darkening control attribute
uniform texture2D gEdgeDarkControl : InputTexture;

// edge darkening control sampler.
uniform sampler2D gEdgeDarkControlSamp = sampler_state
{
    Texture = <gEdgeDarkControl>;
};



// Vertex shader input structure.
attribute VS_INPUT
{
    vec4 Pos : POSITION;
    vec2 UV : TEXCOORD0;
};

// Vertex shader output structure.
attribute VS_TO_PS
{
    vec2 VSUV : TEXCOORD0;
};

// Vertex shader.
GLSLShader VS_AttributePass
{

    void main()
    {
        VSUV = UV;

        // Manipulate P for position
        vec3 P = Position.xyz;

        // Keep this at the bottom of main
        vec4 Po = vec4(P,1); // Convert vec3 position to a vec4 
        vec3 Pw = (gWorldXf*Po).xyz;  // Convert to world Position

        gl_Position = gWvpXf * Po; // Multiply by WorldViewProjection Matrix
    }
}

// Pixel shader output structure.
attribute pixelOut
{
    vec4 colorOut: COLOR0;
}

// Pixel shader.
GLSLShader PS_AttributePass
{
	void main()
	{	

        //colorOut = texture2D(gEdgeDarkControlSamp, VSUV).rgba;
        colorOut = vec4(1.f,0.f, 0.f, 1.f);
	}
}

// The main technique.
technique Main
{
    pass p0
    {
        VertexShader (in VS_INPUT, out VS_TO_PS) = VS_AttributePass;
        PixelShader (in VS_TO_PS, out pixelOut) = PS_AttributePass;
    }
}

